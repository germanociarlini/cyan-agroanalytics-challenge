{"version":3,"sources":["components/Contexts/index.js","services/api.js","components/Map/LayersController/utils.js","components/CollectionController/Modal/index.js","components/CollectionController/Modal/LoadModal/index.js","components/CollectionController/Modal/SaveModal/index.js","components/CollectionController/utils.js","components/CollectionController/index.js","components/Map/LayersController/index.js","components/Map/index.js","App.js","reportWebVitals.js","index.js"],"names":["CollectionContext","createContext","LayersContext","api","axios","create","baseURL","extractLayerGeoJson","layer","geoJson","toGeoJSON","properties","options","buildCollectionGeoJson","collection","a","get","id","features","type","data","map","feature","geometry","BaseModal","isOpen","onRequestClose","content","className","style","overlay","zIndex","icon","faTimes","onClick","LoadModal","onLoad","useState","collections","setCollections","selectedCollection","setSelectedCollection","useEffect","featureCollections","updatedAt","Date","replace","fetchCollections","onLoadHandler","onSelectedCollectionHandler","onDoubleClick","name","toLocaleString","disabled","SaveModal","onSaveAs","onOverwrite","useContext","saveName","setSaveName","value","placeholder","autoFocus","onChange","e","text","target","length","saveNewCollection","put","newCollection","updateCollection","collectionToUpdate","endpoint","payload","updatedCollection","saveFeatures","collectionId","collectionGeoJson","Modal","setAppElement","document","getElementById","CollectionController","activeModal","setActiveModal","setCollection","layers","onSaveAsHandler","onSaveCollection","onOverwriteHandler","collectionToOverwrite","upsertedCollection","loadedCollection","saveModal","loadModal","collectionLabel","faSave","faFolderOpen","styles","default","color","opacity","fillOpacity","weight","polyline","LayersController","onCreate","onEdit","onDelete","editableFeatureGroup","setEditableFeatureGroup","selectedLayer","setSelectedLayer","selectedColor","setSelectedColor","setLayers","useMapEvents","click","clearLayers","collectionLayers","L","GeoJSON","eachLayer","addLayer","on","clickEvent","push","loadCollection","FeatureGroup","ref","featureGroupRef","featureGroup","position","onCreated","createEvent","layerType","setStyle","onEdited","editEvent","editedLayers","Object","values","_layers","onDeleted","deleteEvent","deletedLayersIds","keys","draw","circlemarker","marker","circle","Popup","triangle","onChangeComplete","colorEvent","hex","mapSettings","initialPosition","initialZoom","enableZoomControl","Map","MapContainer","center","zoom","zoomControl","TileLayer","attribution","url","ZoomControl","newLayer","previousLayers","onCreateLayerHandler","pLayer","assign","find","eLayer","_leaflet_id","onEditLayersHandler","deletedLayers","deletedIds","filter","previousLayer","includes","App","collectionProviderValue","useMemo","layersProviderValue","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.02920924.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nexport const CollectionContext = createContext(null);\n\nexport const LayersContext = createContext([]);\n","import axios from \"axios\";\n\nconst api = axios.create({\n    baseURL: \"http://localhost:3001\"\n});\n\nexport default api;","import api from \"../../../services/api\";\n\nexport const extractLayerGeoJson = (layer) => {\n  const geoJson = layer.toGeoJSON();\n  geoJson.properties = { ...layer.options };\n  return geoJson;\n};\n\nexport const buildCollectionGeoJson = async (collection) => {\n  const features = await api.get(`/collections/${collection.id}/features`);\n  const geoJson = {\n    type: \"FeatureCollection\",\n    features: features.data.map((feature) => {\n      return {\n        type: \"Feature\",\n        properties: { ...feature.properties },\n        geometry: feature.geometry,\n      };\n    }),\n  };\n  return geoJson;\n};\n","import { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Modal from \"react-modal\";\n\nconst BaseModal = ({ isOpen, onRequestClose, content }) => {\n  return (\n    <Modal\n      className=\"modal__content\"\n      isOpen={isOpen}\n      onRequestClose={onRequestClose}\n      style={{ overlay: { zIndex: 1001 }, content: { zIndex: 1001 } }}>\n      <FontAwesomeIcon icon={faTimes} className=\"modal__close-button\" onClick={onRequestClose} />\n      {content}\n    </Modal>\n  );\n};\n\nexport default BaseModal;\n","import { useEffect, useState } from \"react\";\nimport api from \"../../../../services/api\";\nimport \"../Modal.css\";\nimport \"./LoadModal.css\";\n\nconst LoadModal = ({ onLoad }) => {\n  const [collections, setCollections] = useState([]);\n  const [selectedCollection, setSelectedCollection] = useState(null);\n\n  useEffect(() => {\n    const fetchCollections = async () => {\n      const featureCollections = await api.get(\"/collections\");\n      setCollections(\n        featureCollections.data.map((collection) => {\n          return {\n            ...collection,\n            updatedAt: new Date(collection.updatedAt.replace(\" \", \"T\")),\n          };\n        })\n      );\n    };\n    fetchCollections();\n  }, []);\n\n  const onSelectedCollectionHandler = (collection) => {\n    setSelectedCollection(collection);\n  };\n\n  const onLoadHandler = () => {\n    onLoad(selectedCollection);\n  };\n\n  return (\n    <div className=\"load-modal__content\">\n      <header className=\"modal__header\">\n        <h2>Load Feature Collection</h2>\n      </header>\n      <main className=\"load-modal__collection-list\">\n        {collections.map((collection) => {\n          return (\n            <div\n              className={`load-modal__collection-item ${\n                collection === selectedCollection ? \"selected\" : \"\"\n              }`}\n              onClick={() => onSelectedCollectionHandler(collection)}\n              onDoubleClick={onLoadHandler}\n              key={collection.id}>\n              <span>{collection.name}</span>\n              <span>{collection.updatedAt.toLocaleString(\"default\")}</span>\n            </div>\n          );\n        })}\n      </main>\n      <footer>\n        <button\n          className=\"modal__button\"\n          onClick={onLoadHandler}\n          disabled={selectedCollection === null}>\n          Load Collection\n        </button>\n      </footer>\n    </div>\n  );\n};\n\nexport default LoadModal;\n","import { useContext, useEffect, useState } from \"react\";\nimport { CollectionContext } from \"../../../Contexts\";\nimport \"../Modal.css\";\nimport \"./SaveModal.css\";\n\nconst SaveModal = ({ onSaveAs, onOverwrite }) => {\n  const { collection } = useContext(CollectionContext);\n  const [saveName, setSaveName] = useState(\"\");\n\n  useEffect(() => {\n    setSaveName(collection ? collection.name : \"\");\n  }, [collection]);\n\n  const onSaveNameChangeHandler = (text) => {\n    setSaveName(text);\n  };\n\n  const onSaveAsHandler = () => {\n    onSaveAs(saveName);\n  };\n\n  const onOverwriteHandler = () => {\n    onOverwrite(saveName, collection);\n  };\n\n  return (\n    <div className=\"save-modal__content\">\n      <header>\n        <h2>Save Feature Collection</h2>\n      </header>\n      <main>\n        <input\n          className=\"save-modal__input\"\n          type=\"text\"\n          value={saveName}\n          placeholder=\"MyCollection...\"\n          autoFocus={true}\n          onChange={(e) => onSaveNameChangeHandler(e.target.value)}></input>\n      </main>\n      <footer>\n        {collection && (\n          <button\n            className=\"modal__button\"\n            disabled={saveName.length === 0}\n            onClick={onOverwriteHandler}>\n            Overwrite...\n          </button>\n        )}\n        <button\n          className=\"modal__button\"\n          disabled={saveName.length === 0}\n          onClick={onSaveAsHandler}>\n          Save as...\n        </button>\n      </footer>\n    </div>\n  );\n};\n\nexport default SaveModal;\n","import api from \"../../services/api\";\n\nexport const saveNewCollection = async (saveName) => {\n  const newCollection = await api.put(`/collections`, { name: saveName });\n  return newCollection.data;\n};\n\nexport const updateCollection = async (saveName, collectionToUpdate) => {\n  const endpoint = `/collections/${collectionToUpdate.id}`;\n  const payload = { name: saveName };\n  const updatedCollection = await api.put(endpoint, payload);\n  return updatedCollection.data;\n};\n\nexport const saveFeatures = async (collectionId, collectionGeoJson) => {\n  const endpoint = `/collections/${collectionId}/features`;\n  return await api.put(endpoint, collectionGeoJson);\n};\n","import { faFolderOpen, faSave } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useContext, useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { CollectionContext, LayersContext } from \"../Contexts\";\nimport { extractLayerGeoJson } from \"../Map/LayersController/utils\";\nimport \"./CollectionController.css\";\nimport BaseModal from \"./Modal\";\nimport LoadModal from \"./Modal/LoadModal\";\nimport SaveModal from \"./Modal/SaveModal\";\nimport { saveFeatures, saveNewCollection, updateCollection } from \"./utils\";\n\nModal.setAppElement(document.getElementById(\"root\"));\n\nconst CollectionController = () => {\n  const [activeModal, setActiveModal] = useState(null);\n  const { collection, setCollection } = useContext(CollectionContext);\n  const { layers } = useContext(LayersContext);\n\n  const onSaveAsHandler = async (saveName) => {\n    const newCollection = await saveNewCollection(saveName);\n    onSaveCollection(newCollection);\n  };\n\n  const onOverwriteHandler = async (saveName, collectionToOverwrite) => {\n    const updatedCollection = await updateCollection(saveName, collectionToOverwrite);\n    onSaveCollection(updatedCollection);\n  };\n\n  const onSaveCollection = async (upsertedCollection) => {\n    const collectionGeoJson = layers.map((layer) => extractLayerGeoJson(layer));\n    const saveFeaturesResult = await saveFeatures(upsertedCollection.id, collectionGeoJson);\n    if (saveFeaturesResult) {\n      setActiveModal(null);\n      setCollection(upsertedCollection);\n    } else {\n      // show error toast\n    }\n  };\n\n  const onLoadHandler = async (loadedCollection) => {\n    setActiveModal(null);\n    setCollection(loadedCollection);\n  };\n\n  const saveModal = <SaveModal onSaveAs={onSaveAsHandler} onOverwrite={onOverwriteHandler} />;\n  const loadModal = <LoadModal onLoad={(loadedCollection) => onLoadHandler(loadedCollection)} />;\n  const collectionLabel = collection ? `Editing ${collection.name}` : \"New Collection\";\n\n  return (\n    <div className=\"collection-controller__container\">\n      <span className=\"collection-controller__editing-label\">{collectionLabel}</span>\n      <div className=\"collection-controller_toolbar\">\n        <div\n          className=\"collection-controller_toolbar-button\"\n          onClick={() => setActiveModal(saveModal)}>\n          <FontAwesomeIcon icon={faSave} />\n        </div>\n        <div\n          className=\"collection-controller_toolbar-button\"\n          onClick={() => setActiveModal(loadModal)}>\n          <FontAwesomeIcon icon={faFolderOpen} />\n        </div>\n        <BaseModal\n          isOpen={activeModal !== null}\n          onRequestClose={() => setActiveModal(null)}\n          content={activeModal}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default CollectionController;\n","import L from \"leaflet\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { TwitterPicker } from \"react-color\";\nimport { FeatureGroup, Popup, useMapEvents } from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport { CollectionContext, LayersContext } from \"../../Contexts\";\nimport { buildCollectionGeoJson } from \"./utils\";\n\nconst styles = {\n  default: {\n    color: \"#000\",\n    opacity: 0.9,\n    fillOpacity: 0.5,\n    weight: 1,\n  },\n  polyline: {\n    color: \"#000\",\n    opacity: 0.7,\n    weight: 4,\n  },\n};\n\nconst LayersController = ({ onCreate, onEdit, onDelete }) => {\n  const [editableFeatureGroup, setEditableFeatureGroup] = useState(null);\n  const [selectedLayer, setSelectedLayer] = useState(null);\n  const [selectedColor, setSelectedColor] = useState(styles.default.color);\n\n  const { collection } = useContext(CollectionContext);\n  const { setLayers } = useContext(LayersContext);\n\n  useMapEvents({\n    click() {\n      setSelectedLayer(null); // reset the selected layer when clicking elsewhere\n    },\n  });\n\n  useEffect(() => {\n    editableFeatureGroup?.clearLayers();\n\n    const loadCollection = async (collection) => {\n      const collectionLayers = [];\n      const collectionGeoJson = await buildCollectionGeoJson(collection);\n\n      const leafletGeoJson = new L.GeoJSON(collectionGeoJson, {\n        style: (feature) => {\n          return { ...feature.properties };\n        },\n      });\n\n      leafletGeoJson.eachLayer((layer) => {\n        editableFeatureGroup.addLayer(layer);\n        layer.on({\n          click(clickEvent) {\n            setSelectedLayer(clickEvent.target);\n            setSelectedColor(clickEvent.target.options.color);\n          },\n        });\n        collectionLayers.push(layer);\n      });\n\n      setLayers(collectionLayers);\n    };\n    if (collection) {\n      loadCollection(collection);\n    } else {\n      setLayers([]);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [collection]);\n\n  const onFeatureGroupReady = (featureGroup) => {\n    if (featureGroup === null) {\n      return; // recommended by react-leaflet-draw docs\n    }\n    setEditableFeatureGroup(featureGroup);\n  };\n\n  const onCreateLayerHandler = (createEvent) => {\n    const { layer, layerType } = createEvent;\n    const style = layerType === \"polyline\" ? styles.polyline : styles.default;\n    layer.setStyle(style);\n    layer.on({\n      click(clickEvent) {\n        setSelectedLayer(clickEvent.target);\n        setSelectedColor(clickEvent.target.options.color);\n      },\n    });\n    onCreate(layer);\n  };\n\n  const onEditLayersHandler = (editEvent) => {\n    const editedLayers = Object.values(editEvent.layers._layers);\n    onEdit(editedLayers);\n  };\n\n  const onColorChangeHandler = (colorEvent) => {\n    const { hex } = colorEvent;\n    selectedLayer.setStyle({ ...selectedLayer.options, color: hex });\n    setSelectedColor(hex);\n    onEdit([selectedLayer]);\n  };\n\n  const onDeleteLayersHandler = (deleteEvent) => {\n    const deletedLayersIds = Object.keys(deleteEvent.layers._layers).map((id) => +id);\n    onDelete(deletedLayersIds);\n  };\n\n  return (\n    <FeatureGroup\n      ref={(featureGroupRef) => {\n        onFeatureGroupReady(featureGroupRef);\n      }}>\n      <EditControl\n        position=\"topright\"\n        onCreated={onCreateLayerHandler}\n        onEdited={onEditLayersHandler}\n        onDeleted={onDeleteLayersHandler}\n        draw={{\n          circlemarker: false,\n          marker: false,\n          circle: false,\n        }}\n      />\n      <Popup>\n        <TwitterPicker\n          triangle=\"hide\"\n          color={selectedColor}\n          onChangeComplete={onColorChangeHandler}\n        />\n      </Popup>\n    </FeatureGroup>\n  );\n};\n\nexport default LayersController;\n","import { useContext } from \"react\";\nimport { MapContainer, TileLayer, ZoomControl } from \"react-leaflet\";\nimport { LayersContext } from \"../Contexts\";\nimport LayersController from \"./LayersController\";\nimport \"./Map.css\";\n\nconst mapSettings = {\n  initialPosition: [-3.731862, -38.526669],\n  initialZoom: 12,\n  enableZoomControl: false,\n};\n\nconst Map = () => {\n  const { setLayers } = useContext(LayersContext);\n\n  const onCreateLayerHandler = (newLayer) => {\n    setLayers((previousLayers) => [...previousLayers, newLayer]);\n  };\n\n  const onEditLayersHandler = (editedLayers) => {\n    setLayers((previousLayers) =>\n      previousLayers.map((pLayer) =>\n        Object.assign(\n          pLayer,\n          editedLayers.find((eLayer) => eLayer._leaflet_id === pLayer._leaflet_id)\n        )\n      )\n    );\n  };\n\n  const onDeleteLayersHandler = (deletedIds) => {\n    setLayers((previousLayers) =>\n      previousLayers.filter((previousLayer) => !deletedIds.includes(previousLayer._leaflet_id))\n    );\n  };\n\n  return (\n    <MapContainer\n      center={mapSettings.initialPosition}\n      zoom={mapSettings.initialZoom}\n      zoomControl={mapSettings.enableZoomControl}>\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n\n      <ZoomControl position=\"bottomleft\" />\n\n      <LayersController\n        onCreate={(newLayer) => onCreateLayerHandler(newLayer)}\n        onEdit={(editedLayers) => onEditLayersHandler(editedLayers)}\n        onDelete={(deletedLayers) => onDeleteLayersHandler(deletedLayers)}\n      />\n    </MapContainer>\n  );\n};\n\nexport default Map;\n","import { useMemo, useState } from \"react\";\nimport CollectionController from \"./components/CollectionController\";\nimport { CollectionContext, LayersContext } from \"./components/Contexts\";\nimport Map from \"./components/Map\";\n\nconst App = () => {\n  const [collection, setCollection] = useState(null);\n  const [layers, setLayers] = useState([]);\n\n  const collectionProviderValue = useMemo(\n    () => ({\n      collection,\n      setCollection,\n    }),\n    [collection, setCollection]\n  );\n\n  const layersProviderValue = useMemo(\n    () => ({\n      layers,\n      setLayers,\n    }),\n    [layers, setLayers]\n  );\n\n  return (\n    <div className=\"App\">\n      <CollectionContext.Provider value={collectionProviderValue}>\n        <LayersContext.Provider value={layersProviderValue}>\n          <CollectionController />\n          <Map />\n        </LayersContext.Provider>\n      </CollectionContext.Provider>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}